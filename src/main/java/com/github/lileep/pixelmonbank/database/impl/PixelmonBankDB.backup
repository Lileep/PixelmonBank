package com.github.lileep.pixelmonbank.database.impl;

import com.envyful.api.config.type.SQLDatabaseDetails;
import com.envyful.api.database.Database;
import com.envyful.api.database.impl.SimpleHikariDatabase;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Objects;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

/**
 *
 * Hikari SQL implementation of the {@link Database} interface
 *
 */
public class PixelmonBankDB implements Database {

    private final HikariDataSource hikari;

    public PixelmonBankDB(SQLDatabaseDetails details) {
        this(details.getConnectionUrl(), details.getPoolName(), details.getIp(), details.getPort(),
                details.getUsername(), details.getPassword(), details.getDatabase(), details.getMaxPoolSize(), details.getMaxLifeTimeSeconds()
        );
    }

    public PixelmonBankDB(String name, String ip, int port, String username, String password, String database) {
        this(null, name, ip, port, username, password, database, 30, 30);
    }

    public PixelmonBankDB(String connectionUrl, String name, String ip, int port, String username,
                          String password, String database, int maxConnections, long maxLifeTime) {
        HikariDataSource hikari1;
        HikariConfig config = new HikariConfig();

        config.setMaximumPoolSize(Math.max(1, maxConnections));
        config.setPoolName(name);

        config.setJdbcUrl(Objects.requireNonNullElseGet(connectionUrl, () -> "jdbc:mysql://" + ip + ":" + port + "/" + database+"?characterEncoding=utf-8&serverTimezone=" + TimeZone.getDefault().getID()));

        config.addDataSourceProperty("serverName", ip);
        config.addDataSourceProperty("port", port);
        config.addDataSourceProperty("databaseName", database);
        config.setDriverClassName(com.mysql.cj.jdbc.Driver.class.getName());
//        config.addDataSourceProperty("driverClassName", "com.mysql.cj.jdbc.Driver");
//        config.addDataSourceProperty("driverClass", "com.mysql.cj.jdbc.Driver");
        config.addDataSourceProperty("user", username);
        config.addDataSourceProperty("password", password);
        config.addDataSourceProperty("cachePrepStmts", true);
        config.addDataSourceProperty("prepStmtCacheSize", 250);
        config.addDataSourceProperty("prepStmtCacheSqlLimit", 2048);
        config.addDataSourceProperty("useServerPrepStmts", true);
        config.addDataSourceProperty("cacheCallableStmts", true);
        config.addDataSourceProperty("alwaysSendSetIsolation", false);
        config.addDataSourceProperty("cacheServerConfiguration", true);
        config.addDataSourceProperty("elideSetAutoCommits", true);
        config.addDataSourceProperty("useLocalSessionState", true);
        config.addDataSourceProperty("characterEncoding", "utf8");
        config.addDataSourceProperty("useUnicode", "true");
        config.addDataSourceProperty("maxLifetime", TimeUnit.SECONDS.toMillis(maxLifeTime));
        config.setMaxLifetime(TimeUnit.SECONDS.toMillis(maxLifeTime));
        config.setConnectionTimeout(TimeUnit.SECONDS.toMillis(30L));
        config.setLeakDetectionThreshold(TimeUnit.SECONDS.toMillis(30L));
//        config.setLeakDetectionThreshold(TimeUnit.SECONDS.toMillis(60L));
        config.setConnectionTestQuery("/* Ping */ SELECT 1");
        try {
            hikari1 = new HikariDataSource(config);
        }catch (Exception e) {
            System.out.println("Ah-oh, "+e);
            hikari1 = new HikariDataSource();
        }
        this.hikari = hikari1;
        System.out.println("Hikari pool created!");
    }

    @Override
    public Connection getConnection() throws SQLException {
        return this.hikari.getConnection();
    }

    @Override
    public void close() {
        this.hikari.close();
    }
}
